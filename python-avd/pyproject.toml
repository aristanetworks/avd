[project]
name="pyavd"
dynamic = ["version"]
authors=[{ name = "Arista Networks", email = "ansible@arista.com"}]
description="Arista Validated Designs"
readme = "README.md"
license = { file = "pyavd/LICENSE" }
classifiers = [
    "Operating System :: OS Independent",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Testing",
]
keywords = ["pyavd"]
requires-python = ">=3.10"
dependencies = [
    "aristaproto>=0.1.1",
    "cryptography>=38.0.4",
    "deepmerge>=1.1.0",
    "Jinja2>=3.0",
    "requests>=2.27.0",
]

[project.urls]
homepage = "https://avd.arista.com"
repository = "https://github.com/aristanetworks/avd"

[project.optional-dependencies]
ansible = [
    "ansible-core>=2.15.0,<2.18.0",
    "pyavd[ansible-collection]",
]
ansible-collection = [
    "anta>=1.0.0",
    "cvprac>=1.4.0",
    "netaddr>=0.7.19",
    "PyYAML>=6.0.0",
    "treelib>=1.5.5",
]

[build-system]
requires = [
    "setuptools>=66.1",
    "wheel",
    "jinja2>=3.0",
    "jsonschema>=4.10.3",
    "referencing>=0.35.0",
    "deepmerge>=1.1.0",
    "pyyaml>=6.0.0",
    "mkdocstrings[python]",
    "pydantic>=2.3.0",
    "cryptography>=38.0.4",
    "aristaproto>=0.1.1",
]
build-backend = "custom_build_backend"
backend-path = ["scripts"]

[tool.setuptools]
include-package-data = true

[tool.setuptools.package-data]
"*" = [
    "avd_meta_schema.pickle",
    "eos_cli_config_gen.schema.pickle",
    "eos_designs.schema.pickle",
]

[tool.setuptools.packages.find]
include = ["pyavd*"]

[tool.setuptools.dynamic]
version = {attr = "pyavd.__version__"}

[tool.black]
# Black has been replaced with Ruff.
# This section should be removed later, but kept here to avoid IDE extensions from messing up the code.
line-length = 160

force-exclude = '''pyavd/_cv/api/.*'''

[tool.isort]
# Isort has been replaced with Ruff.
# This section should be removed later, but kept here to avoid IDE extensions from messing up the code.
profile = "black"
skip_gitignore = true
line_length = 160
known_first_party = ["pyavd", "schema_tools"]

extend_skip_glob = [
  "pyavd/_cv/api/**/*"
]

[tool.coverage.run]
branch = true

[tool.coverage.report]
show_missing = true
fail_under = 90
include = [
  "pyavd/*"
]
omit = [
  "pyavd/_cv/api/*"
]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    # Don't complain about TYPE_CHECKING blocks
    "if TYPE_CHECKING:",
    # Don't complain about Jinja2 internalcode
    # Note that except KeyError is a bit sad but this is the pattern
    "except KeyError:",
    "@internalcode",
    "raise TemplateRuntimeError",
    "^blocks = {}",
    "^debug_info =.*",
]

[tool.ruff]
# Extend the `pyproject.toml` file in the parent directory...
# Should not be needed, but the ruff vscode extension does not seem to respect the ruff behavior of ignoring files without tool.ruff
extend = "../pyproject.toml"
