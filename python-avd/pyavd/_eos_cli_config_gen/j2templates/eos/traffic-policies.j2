{#
 Copyright (c) 2023-2024 Arista Networks, Inc.
 Use of this source code is governed by the Apache License 2.0
 that can be found in the LICENSE file.
#}
{# eos - traffic policies #}
{% if traffic_policies is arista.avd.defined %}
!
traffic-policies
{# FIELD SET #}
{#     -- L4 PORT MANAGEMENT -- #}
{%     for field_set_port in traffic_policies.field_sets.ports | arista.avd.natural_sort('name') %}
   field-set l4-port {{ field_set_port.name }}
{%         if field_set_port.port_range is arista.avd.defined %}
      {{ field_set_port.port_range }}
{%         endif %}
{%         if not loop.last %}
   !
{%         endif %}
{%     endfor %}
{#     -- IPv4 PREFIX MANAGEMENT -- #}
{%     for field_set_ipv4 in traffic_policies.field_sets.ipv4 | arista.avd.natural_sort('name') %}
   field-set ipv4 prefix {{ field_set_ipv4.name }}
{%         if field_set_ipv4.prefixes is arista.avd.defined %}
      {{ field_set_ipv4.prefixes | arista.avd.natural_sort | join(' ') }}
{%         endif %}
{%         if not loop.last %}
   !
{%         endif %}
{%     endfor %}
{#     -- IPv6 PREFIX MANAGEMENT -- #}
{%     for field_set_ipv6 in traffic_policies.field_sets.ipv6 | arista.avd.natural_sort('name') %}
   field-set ipv6 prefix {{ field_set_ipv6.name }}
{%         if field_set_ipv6.prefixes is arista.avd.defined %}
      {{ field_set_ipv6.prefixes | arista.avd.natural_sort | join(' ') }}
{%         endif %}
{%         if not loop.last %}
   !
{%         endif %}
{%     endfor %}
{# Global options #}
{%     if traffic_policies.options.counter_per_interface is arista.avd.defined(true) %}
   counter interface per-interface ingress
   !
{%     endif %}
{# TRAFFIC POLICIES #}
{%     for policy in traffic_policies.policies | arista.avd.natural_sort('name') %}
   traffic-policy {{ policy.name }}
{%         if policy.matches is arista.avd.defined %}
{# COUNTER CREATION SECTION #}
{%             set transient_values = namespace() %}
{%             set transient_values.counters = [] %}
{%             for match in policy.matches %}
{%                 if match.actions.count is arista.avd.defined %}
{%                     do transient_values.counters.append(match.actions.count | string) %}
{%                 endif %}
{%             endfor %}
{%             if transient_values.counters | length > 0 %}
      counter {{ transient_values.counters | arista.avd.natural_sort | join(' ') }}
      !
{%             endif %}
{# MATCH SECTION #}
{%             for match in policy.matches %}
      match {{ match.name }} {{ match.type | lower }}
{#                 -- SOURCE PREFIX MANAGEMENT -- #}
{%                 if match.source.prefixes is arista.avd.defined %}
         source prefix {{ match.source.prefixes | arista.avd.natural_sort | join(' ') }}
{%                 elif match.source.prefix_lists is arista.avd.defined %}
         source prefix field-set {{ match.source.prefix_lists | arista.avd.natural_sort | join(' ') }}
{%                 endif %}
{#                 -- DESTINATION PREFIX MANAGEMENT -- #}
{%                 if match.destination.prefixes is arista.avd.defined %}
         destination prefix {{ match.destination.prefixes | arista.avd.natural_sort | join(' ') }}
{%                 elif match.destination.prefix_lists is arista.avd.defined %}
         destination prefix field-set {{ match.destination.prefix_lists | arista.avd.natural_sort | join(' ') }}
{%                 endif %}
{#                 -- PROTOCOL MANAGEMENT -- #}
{%                 if match.protocols is arista.avd.defined %}
{%                     set bgp_flag = True %}
{%                     for protocol in match.protocols %}
{%                         if protocol.protocol | lower in ['neighbors', 'bgp'] and bgp_flag %}
{%                             if protocol.protocol | lower == 'neighbors' %}
{%                                 set protocol_neighbors_cli = 'protocol neighbors bgp' %}
{%                                 if protocol.enforce_gtsm is arista.avd.defined(true) %}
{%                                     set protocol_neighbors_cli = protocol_neighbors_cli ~ ' enforce ttl maximum-hops' %}
{%                                 endif %}
         {{ protocol_neighbors_cli }}
{%                             else %}
         protocol bgp
{%                             endif %}
{%                             break %}
{%                         else %}
{%                             set bgp_flag = False %}
{%                             set protocol_cli = 'protocol ' ~ protocol.protocol | lower %}
{%                             if protocol.flags is arista.avd.defined and protocol.protocol | lower == 'tcp' %}
{%                                 for flag in protocol.flags %}
         {{ protocol_cli }} flags {{ flag }}
{%                                 endfor %}
{%                             endif %}
{%                             if protocol.protocol | lower in ['tcp','udp'] and (
                                 protocol.src_port is arista.avd.defined or
                                 protocol.dst_port is arista.avd.defined or
                                 protocol.src_field is arista.avd.defined or
                                 protocol.dst_field is arista.avd.defined) %}
{#                                 -- source/destination port-list -- #}
{%                                 if protocol.src_port is arista.avd.defined or protocol.dst_port is arista.avd.defined %}
{%                                     set protocol_port_cli = protocol_cli %}
{%                                     if protocol.src_port is arista.avd.defined %}
{%                                         set protocol_port_cli = protocol_port_cli ~ ' source port ' ~ protocol.src_port %}
{%                                     endif %}
{%                                     if protocol.dst_port is arista.avd.defined %}
{%                                         set protocol_port_cli = protocol_port_cli ~ ' destination port ' ~ protocol.dst_port %}
{%                                     endif %}
         {{ protocol_port_cli }}
{%                                 endif %}
{#                                 -- source/destination field-set -- #}
{%                                 if protocol.src_field is arista.avd.defined or protocol.dst_field is arista.avd.defined %}
{%                                     set protocol_field_cli = protocol_cli %}
{%                                     if protocol.src_field is arista.avd.defined %}
{%                                         set protocol_field_cli = protocol_field_cli ~ ' source port field-set ' ~ protocol.src_field %}
{%                                     endif %}
{%                                     if protocol.dst_field is arista.avd.defined %}
{%                                         set protocol_field_cli = protocol_field_cli ~ ' destination port field-set ' ~ protocol.dst_field %}
{%                                     endif %}
         {{ protocol_field_cli }}
{%                                 endif %}
{%                             elif protocol.icmp_type is arista.avd.defined and protocol.protocol | lower == 'icmp' %}
         {{ protocol_cli }} type {{ protocol.icmp_type | arista.avd.natural_sort | join(' ') }} code all
{%                             else %}
         {{ protocol_cli }}
{%                             endif %}
{%                         endif %}
{%                     endfor %}
{%                 endif %}
{#                 -- TTL MANAGEMENT -- #}
{%                 if match.ttl is arista.avd.defined %}
         ttl {{ match.ttl }}
{%                 endif %}
{#                 -- FRAGMENT MANAGEMENT -- #}
{%                 if match.fragment.offset is arista.avd.defined %}
         fragment offset {{ match.fragment.offset }}
{%                 elif match.fragment is defined %}
         fragment
{%                 endif %}
{#       -- ACTIONS SECTION -- #}
{%                 if match.actions.count is arista.avd.defined or match.actions.traffic_class is arista.avd.defined or match.actions.dscp is arista.avd.defined or match.actions.drop is arista.avd.defined(true)  %}
         !
         actions
{#                     -- COUNT packets -- #}
{%                     if match.actions.count is arista.avd.defined %}
            count {{ match.actions.count }}
{%                     endif %}
{#                     -- DROP Action -- #}
{%                     if match.actions.drop is arista.avd.defined(true) %}
            drop
{#                         -- LOGGING only if DROP is set-- #}
{%                         if match.actions.log is arista.avd.defined(true) %}
            log
{%                         endif %}
{%                     endif %}
{#                     -- DSCP -- #}
{%                     if match.actions.dscp is arista.avd.defined %}
            set dscp {{ match.actions.dscp }}
{%                     endif %}
{#                     -- Traffic Class -- #}
{%                     if match.actions.traffic_class is arista.avd.defined %}
            set traffic class {{ match.actions.traffic_class }}
{%                     endif %}
{%                 endif %}
{# END OF MATCH Section #}
      !
{%             endfor %}
{%         endif %}
{# DEFAULT MATCH Section #}
      match ipv4-all-default ipv4
{%         if policy.default_actions.ipv4 is arista.avd.defined %}
         actions
{#             -- COUNT packets ipv4 -- #}
{%             if policy.default_actions.ipv4.count is arista.avd.defined %}
            count {{ policy.default_actions.ipv4.count }}
{%             endif %}
{#             -- DROP Action ipv4 -- #}
{%             if policy.default_actions.ipv4.drop is arista.avd.defined(true) %}
            drop
{#                 -- LOGGING ipv4 only if DROP is set-- #}
{%                 if policy.default_actions.ipv4.log is arista.avd.defined(true) %}
            log
{%                 endif %}
{%             endif %}
{#             -- DSCP ipv4 -- #}
{%             if policy.default_actions.ipv4.dscp is arista.avd.defined %}
            set dscp {{ policy.default_actions.ipv4.dscp }}
{%             endif %}
{#             -- Traffic Class ipv4 -- #}
{%             if policy.default_actions.ipv4.traffic_class is arista.avd.defined %}
            set traffic class {{ policy.default_actions.ipv4.traffic_class }}
{%             endif %}
{%         endif %}
      !
      match ipv6-all-default ipv6
{%         if policy.default_actions.ipv6 is arista.avd.defined %}
         actions
{#             -- COUNT packets ipv6 -- #}
{%             if policy.default_actions.ipv6.count is arista.avd.defined %}
            count {{ policy.default_actions.ipv6.count }}
{%             endif %}
{#             -- DROP Action ipv6 -- #}
{%             if policy.default_actions.ipv6.drop is arista.avd.defined(true) %}
            drop
{#                 -- LOGGING ipv6 only if DROP is set-- #}
{%                 if policy.default_actions.ipv6.log is arista.avd.defined(true) %}
            log
{%                 endif %}
{%             endif %}
{#             -- DSCP ipv6 -- #}
{%             if policy.default_actions.ipv6.dscp is arista.avd.defined %}
            set dscp {{ policy.default_actions.ipv6.dscp }}
{%             endif %}
{#             -- Traffic Class ipv6 -- #}
{%             if policy.default_actions.ipv6.traffic_class is arista.avd.defined %}
            set traffic class {{ policy.default_actions.ipv6.traffic_class }}
{%             endif %}
{%         endif %}
{# END of DEFAULT MATCH Section #}
{%         if not loop.last %}
   !
{%         endif %}
{%     endfor %}
{% endif %}
