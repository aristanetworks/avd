# Copyright (c) 2023-2024 Arista Networks, Inc.
# Use of this source code is governed by the Apache License 2.0
# that can be found in the LICENSE file.
# yaml-language-server: $schema=../../../_schema/avd_meta_schema.json
# Line above is used by RedHat's YAML Schema vscode extension
# Use Ctrl + Space to get suggestions for every field. Autocomplete will pop up after typing 2 letters.
type: dict
$defs:
  network_services:
    documentation_options:
      table: network-services-common-settings
    type: list
    primary_key: name
    items:
      type: dict
      keys:
        name:
          type: str
          description: |
            Specify a tenant name.
            Tenant provide a construct to group L3 VRFs and L2 VLANs.
            Networks services can be filtered by tenant name.
        mac_vrf_vni_base:
          type: int
          convert_types:
            - str
          min: 0
          max: 16770000
          description: |
            Base number for MAC VRF VXLAN Network Identifier (required with VXLAN).
            VXLAN VNI is derived from the base number with simple addition.
            i.e. mac_vrf_vni_base = 10000, svi 100 = VNI 10100, svi 300 = VNI 10300.
        mac_vrf_id_base:
          type: int
          convert_types:
            - str
          min: 0
          max: 16770000
          description: |
            If not set, "mac_vrf_vni_base" will be used.
            Base number for MAC VRF RD/RT ID (Required unless mac_vrf_vni_base is set)
            ID is derived from the base number with simple addition.
            i.e. mac_vrf_id_base = 10000, svi 100 = RD/RT 10100, svi 300 = RD/RT 10300.
        vlan_aware_bundle_number_base:
          type: int
          convert_types:
            - str
          default: 0
          description: |
            Base number for VLAN aware bundle RD/RT.
            The "Assigned Number" part of RD/RT is derived from vrf_vni + vlan_aware_bundle_number_base.
        pseudowire_rt_base:
          documentation_options:
            table: network-services-point-to-point-services-settings
          type: int
          description: |
            Pseudowire RT base, used to generate route targets for VPWS services.
            Avoid overlapping route target spaces between different services.
          convert_types:
            - str
        enable_mlag_ibgp_peering_vrfs:
          documentation_options:
            table: network-services-vrfs-settings
          type: bool
          description: |
            MLAG iBGP peering per VRF.
            By default an iBGP peering is configured per VRF between MLAG peers on separate VLANs.
            Setting `enable_mlag_ibgp_peering_vrfs` false under a tenant will change this default to prevent configuration of these peerings and VLANs for all VRFs in the tenant.
            This setting can be overridden per VRF.
        redistribute_mlag_ibgp_peering_vrfs:
          documentation_options:
            table: network-services-vrfs-settings
          type: bool
          default: true
          description: |
            Redistribute the connected subnet for the MLAG iBGP peering per VRF into overlay BGP.
            By default the iBGP peering subnet is redistributed into the overlay routing protocol per VRF.
            Setting `redistribute_mlag_ibgp_peering_vrfs: false` under a tenant will change this default to prevent redistribution of these subnets for all VRFs in the tenant.
            This setting can be overridden per VRF.
        evpn_vlan_bundle:
          type: str
          description: |-
            Enable `evpn_vlan_bundle` for all l2vlans and SVIs under the tenant. This `evpn_vlan_bundle` should be present in `evpn_vlan_bundles`.
        bgp_peer_groups:
          documentation_options:
            table: network-services-vrfs-bgp-settings
          type: list
          primary_key: name
          description: |
            List of BGP peer groups definitions.
            This will configure BGP peer groups to be used inside the tenant VRF for peering with external devices.
            Since BGP peer groups are configured at higher BGP level, shared between VRFs,
            peer_group names should not overlap between VRFs.
          items:
            $ref: "eos_cli_config_gen#/keys/router_bgp/keys/peer_groups/items"
            type: dict
            keys:
              name:
                type: str
                description: BGP peer group name.
              nodes:
                type: list
                items:
                  type: str
                description: |
                  Nodes is required to restrict configuration of BGP neighbors to certain nodes in the network.
                  If not set the peer-group is created on devices which have a bgp_peer mapped to the corresponding peer_group.
              address_family_ipv4:
                type: dict
                keys:
                  activate:
                    type: bool
                  route_map_in:
                    type: str
                    description: Inbound route-map name.
                  route_map_out:
                    type: str
                    description: Outbound route-map name.
                  default_originate:
                    type: dict
                    $ref: "eos_cli_config_gen#/keys/router_bgp/keys/address_family_ipv4/keys/peer_groups/items/keys/default_originate"
                  next_hop:
                    type: dict
                    $ref: "eos_cli_config_gen#/keys/router_bgp/keys/address_family_ipv4/keys/peer_groups/items/keys/next_hop"
                  prefix_list_in:
                    type: str
                    description: Inbound prefix-list name.
                  prefix_list_out:
                    type: str
                    description: Outbound prefix-list name.
              address_family_ipv6:
                type: dict
                keys:
                  activate:
                    type: bool
                  route_map_in:
                    type: str
                    description: Inbound route-map name.
                  route_map_out:
                    type: str
                    description: Outbound route-map name.
                  prefix_list_in:
                    type: str
                    description: Inbound prefix-list name.
                  prefix_list_out:
                    type: str
                    description: Outbound prefix-list name.
        evpn_l2_multicast:
          documentation_options:
            table: network-services-multicast-settings
          description: |
            Enable EVPN L2 Multicast for all SVIs and l2vlans within Tenant.
            - Multicast group binding is created only for Multicast traffic. BULL traffic will use ingress-replication.
            - Configures binding between VXLAN, VLAN, and multicast group IPv4 address using the following formula:
              < evpn_l2_multicast.underlay_l2_multicast_group_ipv4_pool > + < vlan_id - 1 > + < evpn_l2_multicast.underlay_l2_multicast_group_ipv4_pool_offset >.
            - The recommendation is to assign a /20 block within the 232.0.0.0/8 Source-Specific Multicast range.
            - Enables `redistribute igmp` on the router bgp MAC VRF.
            - When evpn_l2_multicast.enabled is true for a VLAN or a tenant, "igmp snooping" and "igmp snooping querier" will always be enabled - overriding those individual settings.
            - Requires `evpn_multicast` to also be set to `true`.
          type: dict
          keys:
            enabled:
              type: bool
            underlay_l2_multicast_group_ipv4_pool:
              type: str
              description: IPv4_address/Mask.
            underlay_l2_multicast_group_ipv4_pool_offset:
              type: int
              convert_types:
                - str
            fast_leave:
              type: bool
              description: Enable IGMP snooping fast-leave feature for all SVIs and l2vlans within Tenant.
        evpn_l3_multicast:
          documentation_options:
            table: network-services-multicast-settings
          description: |
            Enable L3 Multicast for all SVIs and l3vlans within Tenant.
            - In the evpn-l3ls design type, this enables L3 EVPN Multicast (aka OISM)'.
            - Multicast group binding for VRF is created only for Multicast traffic. BULL traffic will use ingress-replication.
            - Configures binding between VXLAN, VLAN, and multicast group IPv4 address using the following formula:
              < l3_multicast.evpn_underlay_l3_multicast_group_ipv4_pool > + < vrf_vni - 1 > + < l3_multicast.evpn_underlay_l3_multicast_group_ipv4_pool_offset >.
            - The recommendation is to assign a /20 block within the 232.0.0.0/8 Source-Specific Multicast range.
            - If enabled on an SVI using the anycast default gateway feature, a diagnostic loopback (see below) MUST be configured to source IGMP traffic.
            - Enables `evpn multicast` on the router bgp VRF.
            - When enabled on an SVI:
                 - If switch is part of an MLAG pair, enables "pim ipv4 sparse-mode" on the SVI.
                 - If switch is standalone or A-A MH, enables "ip igmp" on the SVI.
                 - If "ip address virtual" is configured, enables "pim ipv4 local-interface" and uses the diagnostic Loopback defined in the VRF
            - Requires `evpn_multicast` to also be set to `true`.
          type: dict
          keys:
            enabled:
              type: bool
            evpn_underlay_l3_multicast_group_ipv4_pool:
              type: str
              description: IPv4_address/Mask.
              required: true
            evpn_underlay_l3_multicast_group_ipv4_pool_offset:
              type: int
              convert_types:
                - str
            evpn_peg:
              type: list
              description: |
                For each group of nodes, allow configuration of EVPN PEG options.
                The first group of settings where the device's hostname is present in the 'nodes' list will be used.
              items:
                type: dict
                keys:
                  nodes:
                    description: A description will be applied to all nodes with RP addresses configured if not set.
                    type: list
                    items:
                      type: str
                  transit:
                    description: Enable EVPN PEG transit mode.
                    type: bool
        pim_rp_addresses:
          documentation_options:
            table: network-services-multicast-settings
          description: |
            For each group of nodes, allow configuration of RP Addresses & associated groups.
          type: list
          items:
            type: dict
            keys:
              rps:
                description: List of Rendevouz Points.
                type: list
                min_length: 1
                items:
                  type: str
                  description: RP address.
              nodes:
                description: |
                 Restrict configuration to specific nodes.
                 Configuration Will be applied to all nodes if not set.
                type: list
                items:
                  type: str
              groups:
                type: list
                items:
                  type: str
                  description: Group_prefix/mask.
              access_list_name:
                type: str
                convert_types: [ int ]
                description: |
                  List of groups to associate with the RP address set in 'rp'.
                  If access_list_name is set, a standard access-list will be configured matching these groups.
                  Otherwise the groups are configured directly on the RP command.
        igmp_snooping_querier:
          documentation_options:
            table: network-services-multicast-settings
          description: |
            Enable IGMP snooping querier for each SVI/l2vlan within tenant, by default using IP address of Loopback 0.
            When enabled, IGMP snooping querier will only be configured on L3 devices, i.e., uplink_type: p2p.
          type: dict
          keys:
            enabled:
              type: bool
              description: Will be enabled automatically if "evpn_l2_multicast" is enabled.
            source_address:
              type: str
              format: ipv4
              description: Default IP address of Loopback0.
            version:
              type: int
              convert_types:
                - str
              valid_values:
                - 1
                - 2
                - 3
              default: 2
        evpn_l2_multi_domain:
          type: bool
          default: true
          description: Explicitly extend all VLANs/VLAN-Aware Bundles inside the tenant to remote EVPN domains.
        vrfs:
          documentation_options:
            table: network-services-vrfs-settings
          type: list
          primary_key: name
          description: |
            VRFs will only be configured on a node if any of the underlying objects like `svis` or `l3_interfaces` apply to the node.

            It is recommended to only define a VRF in one Tenant. If the same VRF name is used across multiple tenants and those tenants
            are accepted by `filter.tenants` on the node, any object set under the duplicate VRFs must either be unique or be an exact match.

            VRF "default" is partially supported under network-services. Currently the supported options for "default" vrf are route-target,
            route-distinguisher settings, structured_config, raw_eos_cli in bgp and SVIs are the only supported interface type.
            Vlan-aware-bundles are supported as well inside default vrf. OSPF is not supported currently.
          items:
            type: dict
            keys:
              name:
                type: str
                convert_types:
                  - int
              address_families:
                type: list
                items:
                  type: str
                  valid_values:
                    - "evpn"
                    - "vpn-ipv4"
                    - "vpn-ipv6"
              description:
                type: str
                description: VRF description.
              vrf_vni:
                type: int
                convert_types:
                  - str
                min: 1
                max: 16777215
                description: |
                  Required if "vrf_id" is not set.
                  The VRF VNI range is not limited, but if vrf_id is not set, "vrf_vni" is used for calculating MLAG iBGP peering vlan id.
                  "vrf_vni" may also be used for VRF RD/RT ID. See "overlay_rd_type" and "overlay_rt_type" for details.
                  See "mlag_ibgp_peering_vrfs.base_vlan" for details.
                  If vrf_vni > 10000 make sure to adjust "mac_vrf_vni_base" accordingly to avoid overlap.
              vrf_id:
                type: int
                convert_types:
                  - str
                description: |
                  Required if "vrf_vni" is not set.
                  "vrf_id" is used as default value for "vrf_vni" and "ospf.process_id" unless those are set.
                  "vrf_id" may also be used for VRF RD/RT ID. See "overlay_rd_type" and "overlay_rt_type" for details.
                  "vrf_id" is preferred over "vrf_vni" for MLAG iBGP peering vlan, see "mlag_ibgp_peering_vrfs.base_vlan" for details.
              rd_override:
                type: str
                convert_types:
                  - int
                description: |
                  By default, the VRF RD will be derived from the pattern defined in `overlay_rd_type`.
                  The rd_override allows us to override this value and statically define it.

                  rd_override supports two formats:
                    - A single number will be used in the RD assigned number subfield (second part of the RD).
                    - A full RD string with colon separator which will override the full RD.
              rt_override:
                type: str
                convert_types:
                  - int
                description: |
                  By default, the VRF RT will be derived from the pattern defined in `overlay_rt_type`.
                  The rt_override allows us to override this value and statically define it.

                  rt_override supports two formats:
                    - A single number will be used in the RT assigned number subfield (second part of the RT).
                    - A full RT string with colon separator which will override the full RT.
              mlag_ibgp_peering_ipv4_pool:
                type: str
                description: |
                  IPv4_address/Mask
                  The subnet used for iBGP peering in the VRF.
                  Each MLAG pair will be assigned a subnet based on the ID of the primary MLAG switch.
                  If not set, "mlag_peer_l3_ipv4_pool" or "mlag_peer_ipv4_pool" will be used.
              ip_helpers:
                type: list
                primary_key: ip_helper
                description: IP helper for DHCP relay.
                items:
                  type: dict
                  keys:
                    ip_helper:
                      type: str
                      description: IPv4 DHCP server IP.
                    source_interface:
                      type: str
                      description: Interface name.
                    source_vrf:
                      type: str
                      description: VRF to originate DHCP relay packets to DHCP server. If not set, uses current VRF.
                      convert_types:
                        - int
              enable_mlag_ibgp_peering_vrfs:
                type: bool
                description: |
                  MLAG iBGP peering per VRF.
                  By default an iBGP peering is configured per VRF between MLAG peers on separate VLANs.
                  Setting `enable_mlag_ibgp_peering_vrfs: false` under a VRF will change this default and/or override the tenant-wide setting.
              redistribute_mlag_ibgp_peering_vrfs:
                type: bool
                default: true
                description: |
                  Redistribute the connected subnet for the MLAG iBGP peering per VRF into overlay BGP.
                  By default the iBGP peering subnet is redistributed into the overlay routing protocol per VRF.
                  Setting `redistribute_mlag_ibgp_peering_vrfs: false` under a VRF will change this default and/or override the tenant-wide setting.
              mlag_ibgp_peering_vlan:
                type: int
                convert_types:
                  - str
                description: |
                  Manually define the VLAN used on the MLAG pair for the iBGP session.
                  By default this parameter is calculated using the following formula: `<mlag_ibgp_peering_vrfs.base_vlan>` + `<vrf_id>` - 1.
                min: 1
                max: 4096
              vtep_diagnostic:
                type: dict
                description: |
                  Enable VTEP Network diagnostics.
                  This will create a loopback with virtual source-nat enable to perform diagnostics from the switch.
                keys:
                  loopback:
                    type: int
                    convert_types:
                      - str
                    description: |
                      Loopback interface number, required when vtep_diagnotics defined.
                    min: 2
                    max: 2100
                  loopback_description:
                    type: str
                    description: Provide a custom description for loopback interface.
                  loopback_ip_range:
                    type: str
                    description: |
                      IPv4_address/Mask.
                      Loopback ip range, a unique ip is derived from this ranged and assignedto each l3 leaf based on it's unique id.
                      Loopback is not created unless loopback_ip_range or loopback_ip_pools are set.
                  loopback_ip_pools:
                    type: list
                    description: |
                      For inventories with multiple PODs a loopback range can be set per POD to avoid overlaps.
                      This only takes effect when loopback_ip_range is not defined, ptional (loopback is not created unless loopback_ip_range or loopback_ip_pools are set).
                    items:
                      type: dict
                      keys:
                        pod:
                          type: str
                          description: POD name.
                        ipv4_pool:
                          type: str
                          description: IPv4_address/Mask.
              ospf:
                documentation_options:
                  table: network-services-vrfs-ospf-settings
                type: dict
                description: |
                  Router OSPF configuration.
                  This will create an OSPF routing instance in the tenant VRF. If there is no nodes definition, the OSPF instance will be
                  created on all leafs where the VRF is deployed. This will also cause automatic OSPF redistribution into BGP unless
                  explicitly turned off with "redistribute_ospf: false".
                keys:
                  enabled:
                    type: bool
                  process_id:
                    type: int
                    convert_types:
                      - str
                    description: If not set, "vrf_id" will be used.
                  router_id:
                    type: str
                    description: If not set, switch router_id will be used.
                  max_lsa:
                    type: int
                    convert_types:
                      - str
                  bfd:
                    type: bool
                    default: false
                  redistribute_bgp:
                    type: dict
                    keys:
                      enabled:
                        type: bool
                        default: true
                      route_map:
                        type: str
                        description: Route-map name.
                  redistribute_connected:
                    type: dict
                    keys:
                      enabled:
                        type: bool
                        default: false
                      route_map:
                        type: str
                        description: Route-map name.
                  nodes:
                    type: list
                    items:
                      type: str
                      description: Hostname.
              redistribute_ospf:
                documentation_options:
                  table: network-services-vrfs-ospf-settings
                type: bool
                default: true
                description: Non-selectively enabling or disabling redistribute ospf inside the VRF.
              evpn_l3_multicast:
                documentation_options:
                  table: network-services-multicast-settings
                type: dict
                description: |
                  Explicitly enable or disable evpn_l3_multicast to override setting of `<network_services_key>.[].evpn_l3_multicast.enabled`.
                  Allow override of `<network_services_key>.[].evpn_l3_multicast` node_settings.
                  Requires `evpn_multicast` to also be set to `true`.
                keys:
                  enabled:
                    type: bool
                  evpn_peg:
                    type: list
                    description: For each group of nodes, allow configuration of EVPN PEG features.
                    items:
                      type: dict
                      keys:
                        nodes:
                          type: list
                          description: |
                            Restrict configuration to specific nodes.
                            Will apply to all nodes with RP addresses configured if not set.
                          items:
                            type: str
                        transit:
                          type: bool
                          default: false
                          description: Enable EVPN PEG transit mode.
              pim_rp_addresses:
                documentation_options:
                  table: network-services-multicast-settings
                description: |
                  For each group of nodes, allow configuration of RP Addresses & associated groups.
                type: list
                items:
                  type: dict
                  keys:
                    rps:
                      description: A minimum of one RP must be specified.
                      type: list
                      items:
                        type: str
                        description: RP address.
                    nodes:
                      description: |
                        Restrict configuration to specific nodes.
                        Configuration Will be applied to all nodes if not set.
                      type: list
                      items:
                        type: str
                    groups:
                      type: list
                      items:
                        type: str
                        description: Group_prefix/mask.
                    access_list_name:
                      type: str
                      convert_types: [ int ]
                      description: |
                        List of groups to associate with the RP addresses set in 'rps'.
                        If access_list_name is set, a standard access-list will be configured matching these groups.
                        Otherwise the groups are configured directly on the RP command.
              evpn_l2_multi_domain:
                documentation_options:
                  table: network-services-multicast-settings
                type: bool
                description: |
                  Explicitly extend all VLANs/VLAN-Aware Bundles inside the VRF to remote EVPN domains.
                  Overrides `<network_services_key>.[].evpn_l2_multi_domain`.
              svis:
                documentation_options:
                  table: network-services-vrfs-svis-settings
                type: list
                primary_key: id
                allow_duplicate_primary_key: True
                description: |
                  List of SVIs.
                  This will create both the L3 SVI and L2 VLAN based on filters applied to the node.
                items:
                  $ref: "eos_designs#/$defs/svi"
                  type: dict
                  keys:
                    id:
                      type: int
                      convert_types:
                        - str
                      description: SVI interface id and VLAN id.
                      min: 1
                      max: 4096
                    name:
                      type: str
                      description: VLAN name.
                      required: true
                    profile:
                      type: str
                      description: |
                        SVI profile name to apply.
                        SVI can refer to one svi_profile which again can refer to another svi_profile to inherit settings in up to two levels (svi -> svi_profile -> svi_parent_profile).
                    tags:
                      type: list
                      description: |
                        Tags leveraged for networks services filtering.
                        Tags are matched against "filter.tags" defined under node type settings.
                        Tags are also matched against the "node_group" name under node type settings.
                      default: ["all"]
                      items:
                        type: str
                        convert_types:
                          - int
                        description: Tag value.
                    evpn_vlan_bundle:
                      type: str
                      description: |
                        Name of a bundle defined under 'evpn_vlan_bundles' to inherit configuration.
                        This setting overrides "evpn_vlan_bundle" set at tenant level.
                        The common option "evpn_vlan_aware_bundles" is disregarded for this option.
                    nodes:
                      type: list
                      primary_key: node
                      items:
                        type: dict
                        $ref: "eos_designs#/$defs/svi_settings"
                        keys:
                          node:
                            type: str
                          tags:
                            type: list
                            description: |
                              Tags leveraged for networks services filtering.
                              Tags are matched against "filter.tags" defined under node type settings.
                              Tags are also matched against the "node_group" name under node type settings.
                            default: ["all"]
                            items:
                              type: str
                              convert_types:
                                - int
                              description: Tag value.
              l3_interfaces:
                documentation_options:
                  table: network-services-vrfs-l3-interfaces-settings
                type: list
                description: |
                  List of L3 interfaces.
                  This will create IP routed interface inside VRF. Length of interfaces, nodes and ip_addresses must match.
                items:
                  type: dict
                  keys:
                    interfaces:
                      type: list
                      items:
                        type: str
                        description: Interface name.
                    encapsulation_dot1q_vlan:
                      type: list
                      description: For sub-interfaces the dot1q vlan is derived from the interface name by default, but can also be specified.
                      items:
                        type: int
                        convert_types:
                          - str
                        min: 1
                        max: 4094
                    ip_addresses:
                      type: list
                      items:
                        type: str
                        description: IPv4_address/Mask.
                    nodes:
                      type: list
                      items:
                        type: str
                        description: Node.
                    description:
                      type: str
                    descriptions:
                      type: list
                      items:
                        type: str
                      description: |
                        "descriptions" has precedence over "description".
                    enabled:
                      type: bool
                    mtu:
                      type: int
                      convert_types:
                        - str
                    ipv4_acl_in:
                      type: str
                      convert_types:
                        - int
                    ipv4_acl_out:
                      type: str
                      convert_types:
                        - int
                    ospf:
                      type: dict
                      description: OSPF interface configuration.
                      keys:
                        enabled:
                          type: bool
                        point_to_point:
                          type: bool
                          default: false
                        area:
                          type: str
                          convert_types:
                            - int
                          description: OSPF area ID.
                          default: "0"
                        cost:
                          type: int
                          convert_types:
                            - str
                          description: OSPF link cost.
                        authentication:
                          type: str
                          valid_values:
                            - simple
                            - message-digest
                        simple_auth_key:
                          type: str
                          description: Password used with simple authentication.
                        message_digest_keys:
                          type: list
                          items:
                            type: dict
                            keys:
                              id:
                                type: int
                                convert_types:
                                  - str
                              hash_algorithm:
                                type: str
                                valid_values:
                                  - md5
                                  - sha1
                                  - sha256
                                  - sha384
                                  - sha512
                                default: sha512
                              key:
                                type: str
                                description: Key password.
                    pim:
                      type: dict
                      description: |
                        Enable PIM sparse-mode on the interface; requires "evpn_l3_multicast" to be enabled on the VRF/Tenant.
                        Enabling this implicitly makes the device a PIM External Gateway (PEG) in EVPN designs only.
                        At least one RP address must be configured for EVPN PEG to be configured.
                      keys:
                        enabled:
                          type: bool
                    flow_tracking:
                      type: dict
                      $ref: "eos_designs#/$defs/flow_tracking_link"
                      description: |-
                        Configures flow-tracking on the interface. Overrides `fabric_flow_tracking.l3_interfaces` setting.
                    structured_config:
                      type: dict
                      description: Custom structured config added under ethernet_interfaces.[name=<interface>] for eos_cli_config_gen.
                      documentation_options:
                        hide_keys: true
                      $ref: "eos_cli_config_gen#/keys/ethernet_interfaces/items"
                    raw_eos_cli:
                      type: str
                      description: |
                        EOS CLI rendered directly on the Ethernet interface in the final EOS configuration.
              loopbacks:
                documentation_options:
                  table: network-services-vrfs-loopbacks-settings
                type: list
                description: |
                  List of Loopback interfaces.
                  This will create Loopback interfaces inside the VRF.
                items:
                  type: dict
                  keys:
                    node:
                      type: str
                      required: true
                    loopback:
                      type: int
                      required: true
                      min: 0
                      max: 8191
                    ip_address:
                      type: str
                      required: true
                    description:
                      type: str
                    enabled:
                      type: bool
                      default: True
                    ospf:
                      type: dict
                      description: OSPF interface configuration.
                      keys:
                        enabled:
                          type: bool
                          default: False
                        area:
                          type: str
                          convert_types:
                            - int
                          description: OSPF area ID.
                          default: "0"
                    raw_eos_cli:
                      type: str
                      description: |
                        EOS CLI rendered directly on the Loopback interface in the final EOS configuration.
              static_routes:
                type: list
                description: |
                  List of static routes for v4 and/or v6.
                  This will create static routes inside the tenant VRF.
                  If nodes are not specified, all l3leafs that carry the VRF will also be applied the static routes.
                  If a node has a static route in the VRF, redistribute static will be automatically enabled in that VRF.
                  This automatic behavior can be overridden non-selectively with the redistribute_static knob for the VRF.
                items:
                  type: dict
                  keys:
                    destination_address_prefix:
                      type: str
                      description: IPv4_address.
                    gateway:
                      type: str
                      description: IPv4_address.
                    track_bfd:
                      type: bool
                      description: Track next-hop using BFD.
                    distance:
                      type: int
                      convert_types:
                        - str
                      min: 1
                      max: 255
                    tag:
                      type: int
                      convert_types:
                        - str
                      min: 0
                      max: 4294967295
                    name:
                      type: str
                      description: description.
                    metric:
                      type: int
                      convert_types:
                        - str
                      min: 0
                      max: 4294967295
                    interface:
                      type: str
                    nodes:
                      type: list
                      items:
                        type: str
              ipv6_static_routes:
                type: list
                items:
                  type: dict
                  keys:
                    destination_address_prefix:
                      type: str
                      description: IPv6_address.
                    gateway:
                      type: str
                    track_bfd:
                      type: bool
                      description: Track next-hop using BFD.
                    distance:
                      type: int
                      convert_types:
                        - str
                      min: 1
                      max: 255
                    tag:
                      type: int
                      convert_types:
                        - str
                      min: 0
                      max: 4294967295
                    name:
                      type: str
                      description: description.
                    metric:
                      type: int
                      convert_types:
                        - str
                      min: 0
                      max: 4294967295
                    interface:
                      type: str
                    nodes:
                      type: list
                      items:
                        type: str
              redistribute_static:
                type: bool
                description: Non-selectively enabling or disabling redistribute static inside the VRF.
              bgp_peers:
                documentation_options:
                  table: network-services-vrfs-bgp-settings
                type: list
                primary_key: ip_address
                allow_duplicate_primary_key: True
                description: |
                  List of BGP peer definitions.
                  This will configure BGP neighbors inside the tenant VRF for peering with external devices.
                  The configured peer will automatically be activated for ipv4 or ipv6 address family based on the ip address.
                  Note, only ipv4 and ipv6 address families are currently supported in eos_designs.
                  For other address families, use custom_structured configuration with eos_cli_config_gen.
                items:
                  type: dict
                  keys:
                    ip_address:
                      type: str
                      description: IPv4_address or IPv6_address.
                    peer_group:
                      type: str
                      description: Peer group name.
                    remote_as:
                      type: str
                      convert_types:
                        - int
                      description: |-
                        BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                        For asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float number.
                    description:
                      type: str
                    password:
                      type: str
                      description: Encrypted password.
                    send_community:
                      type: str
                      description: |
                        'all' or a combination of 'standard', 'extended', 'large' and 'link-bandwidth (w/options)'.
                    next_hop_self:
                      type: bool
                    timers:
                      type: str
                      description: BGP Keepalive and Hold Timer values in seconds as string <0-3600> <0-3600>.
                    maximum_routes:
                      type: int
                      convert_types:
                        - str
                      min: 0
                      max: 4294967294
                      description: Maximum number of routes (0 means unlimited).
                    maximum_routes_warning_only:
                      type: bool
                    default_originate:
                      type: dict
                      keys:
                        always:
                          type: bool
                    update_source:
                      type: str
                    ebgp_multihop:
                      type: int
                      convert_types:
                        - str
                      min: 1
                      max: 255
                      description: Time-to-live in range of hops.
                    nodes:
                      type: list
                      items:
                        type: str
                      description: Nodes is required to restrict configuration of BGP neighbors to certain nodes in the network.
                    set_ipv4_next_hop:
                      type: str
                      description: |
                        IPv4_address
                        Next hop settings can be either ipv4 or ipv6 for one neighbor, this will be applied by a uniquely generated route-map per neighbor.
                        Next hop takes precedence over route_map_out.
                    set_ipv6_next_hop:
                      type: str
                      description: |
                        IPv6_address
                        Next hop settings can be either ipv4 or ipv6 for one neighbor, this will be applied by a uniquely generated route-map per neighbor.
                        Next hop takes precedence over route_map_out.
                    route_map_out:
                      type: str
                      description: Route-map name.
                    route_map_in:
                      type: str
                      description: Route-map name.
                    prefix_list_in:
                      type: str
                      description: |-
                        Inbound prefix list name.
                        The prefix-list will be associated under the IPv4 or IPv6 address family based on the IP address.
                    prefix_list_out:
                      type: str
                      description: |-
                        Outbound prefix list name.
                        The prefix-list will be associated under the IPv4 or IPv6 address family based on the IP address.
                    local_as:
                      type: str
                      convert_types:
                        - int
                      description: |-
                        Local BGP AS <1-4294967295> or AS number in asdot notation "<1-65535>.<0-65535>".
                        For asdot notation in YAML inputs, the value must be put in quotes, to prevent it from being interpreted as a float number.
                    weight:
                      type: int
                      convert_types:
                        - str
                      min: 0
                      max: 65535
                    bfd:
                      type: bool
                    shutdown:
                      type: bool
              bgp:
                type: dict
                keys:
                  enabled:
                    type: bool
                    description: |-
                      Force (no) configuration of BGP for the VRF.
                      If not set, BGP will be configured when needed according to the following rules:
                      - If the VRF is part of an overlay (`evpn` or `mpls`), BGP will be configured for it.
                      - If any BGP peers are configured under the VRF, BGP will be configured for it. This is useful for L2LS designs with VRFs.
                      - If uplink type is `p2p-vrfs` *and* the vrf is included in the uplink VRFs, BGP will be configured for it.
                  raw_eos_cli:
                    type: str
                    description: |
                      EOS CLI rendered directly on the Router BGP, VRF definition in the final EOS configuration.
                  structured_config:
                    type: dict
                    description: Custom structured config added under router_bgp.vrfs.[name=<vrf>] for eos_cli_config_gen.
                    documentation_options:
                      hide_keys: true
                    $ref: "eos_cli_config_gen#/keys/router_bgp/keys/vrfs/items"
              bgp_peer_groups:
                documentation_options:
                  table: network-services-vrfs-bgp-settings
                type: list
                description: |
                  List of BGP peer groups definitions.
                  This will configure BGP peer groups to be used inside the tenant VRF for peering with external devices.
                  Since BGP peer groups are configured at higher BGP level, shared between VRFs,
                  peer_group names should not overlap between VRFs.
                items:
                  $ref: "eos_cli_config_gen#/keys/router_bgp/keys/peer_groups/items"
                  type: dict
                  keys:
                    name:
                      type: str
                      description: BGP peer group name.
                    nodes:
                      type: list
                      items:
                        type: str
                      description: |
                        Nodes is required to restrict configuration of BGP neighbors to certain nodes in the network.
                        If not set the peer-group is created on devices which have a bgp_peer mapped to the corresponding peer_group.
                    address_family_ipv4:
                      type: dict
                      keys:
                        activate:
                          type: bool
                        route_map_in:
                          type: str
                          description: Inbound route-map name.
                        route_map_out:
                          type: str
                          description: Outbound route-map name.
                        default_originate:
                          type: dict
                          $ref: "eos_cli_config_gen#/keys/router_bgp/keys/address_family_ipv4/keys/peer_groups/items/keys/default_originate"
                        next_hop:
                          type: dict
                          $ref: "eos_cli_config_gen#/keys/router_bgp/keys/address_family_ipv4/keys/peer_groups/items/keys/next_hop"
                        prefix_list_in:
                          type: str
                          description: Inbound prefix-list name.
                        prefix_list_out:
                          type: str
                          description: Outbound prefix-list name.
                    address_family_ipv6:
                      type: dict
                      keys:
                        activate:
                          type: bool
                        route_map_in:
                          type: str
                          description: Inbound route-map name.
                        route_map_out:
                          type: str
                          description: Outbound route-map name.
                        prefix_list_in:
                          type: str
                          description: Inbound prefix-list name.
                        prefix_list_out:
                          type: str
                          description: Outbound prefix-list name.
              additional_route_targets:
                documentation_options:
                  table: network-services-vrfs-settings
                type: list
                description: Configuration of extra route-targets for this VRF. Useful for route-leaking or gateway between address families.
                items:
                  type: dict
                  keys:
                    type:
                      type: str
                      valid_values:
                        - import
                        - export
                    address_family:
                      type: str
                    route_target:
                      type: str
                    nodes:
                      type: list
                      items:
                        type: str
                      description: Nodes is required to restrict configuration of BGP neighbors to certain nodes in the network.
              raw_eos_cli:
                type: str
                description: EOS CLI rendered directly on the root level of the final EOS configuration.
              structured_config:
                type: dict
                description: Custom structured config for eos_cli_config_gen.
                documentation_options:
                  hide_keys: true
                $ref: "eos_cli_config_gen#"
        l2vlans:
          documentation_options:
            table: network-services-l2vlans-settings
          type: list
          primary_key: id
          allow_duplicate_primary_key: True
          description: Define L2 network services organized by vlan id.
          items:
            type: dict
            keys:
              id:
                type: int
                convert_types:
                  - str
                min: 1
                max: 4094
                description: VLAN ID.
              vni_override:
                type: int
                convert_types:
                  - str
                min: 1
                max: 16777215
                description: |
                  By default the VNI will be derived from mac_vrf_vni_base.
                  The vni_override, allows to override this value and statically define it.
              rt_override:
                type: str
                convert_types:
                  - int
                description: |
                  By default the MAC VRF RT will be derived from mac_vrf_id_base + vlan_id.
                  The rt_override allows us to override this value and statically define it.
                  rt_override will default to vni_override if set.

                  rt_override supports two formats:
                    - A single number which will be used in the RT fields instead of mac_vrf_id/mac_vrf_vni (see 'overlay_rt_type' for details).
                    - A full RT string with colon separator which will override the full RT.
              rd_override:
                type: str
                convert_types:
                  - int
                description: |
                  By default the MAC VRF RD will be derived from mac_vrf_id_base + vlan_id.
                  The rt_override allows us to override this value and statically define it.
                  rd_override will default to rt_override or vni_override if set.

                  rd_override supports two formats:
                    - A single number which will be used in the RD assigned number field instead of mac_vrf_id/mac_vrf_vni (see 'overlay_rd_type' for details).
                    - A full RD string with colon separator which will override the full RD.
              name:
                type: str
                required: true
                description: VLAN name.
              tags:
                type: list
                description: |
                  Tags leveraged for networks services filtering.
                  Tags are matched against filter.tags defined under node type settings.
                  Tags are also matched against the node_group name under node type settings.
                items:
                  type: str
                  default: all
              vxlan:
                type: bool
                default: true
                description: Extend this L2VLAN over VXLAN.
              spanning_tree_priority:
                type: int
                convert_types:
                  - str
                description: |-
                  Setting spanning-tree priority per VLAN is only supported with `spanning_tree_mode: rapid-pvst` under node type settings.
                  The default priority for rapid-PVST is set under the node type settings with `spanning_tree_priority` (default=32768).
              evpn_vlan_bundle:
                type: str
                description: |
                  Name of a bundle defined under 'evpn_vlan_bundles' to inherit configuration.
                  This setting overrides "evpn_vlan_bundle" set at tenant level.
                  The common option "evpn_vlan_aware_bundles" is disregarded for this option.
              trunk_groups:
                type: list
                items:
                  type: str
                  description: |
                    Trunk groups are used for limiting vlans to trunk ports assigned to the same trunk group.
                    Requires enable_trunk_groups: true.
              evpn_l2_multicast:
                documentation_options:
                  table: network-services-multicast-settings
                type: dict
                description: |
                  Explicitly enable or disable evpn_l2_multicast to override setting of `<network_services_key>.[].evpn_l2_multicast.enabled`.
                  When evpn_l2_multicast.enabled is set to true for a vlan or a tenant, igmp snooping and igmp snooping querier will always be enabled, overriding those individual settings.
                  Requires `evpn_multicast` to also be set to `true`.
                keys:
                  enabled:
                    type: bool
              igmp_snooping_enabled:
                documentation_options:
                  table: network-services-multicast-settings
                type: bool
                default: true
                description: Activate or deactivate IGMP snooping.
              igmp_snooping_querier:
                documentation_options:
                  table: network-services-multicast-settings
                type: dict
                description: |
                  Enable igmp snooping querier, by default using IP address of Loopback 0.
                  When enabled, igmp snooping querier will only be configured on l3 devices, i.e., uplink_type: p2p.
                keys:
                  enabled:
                    type: bool
                    description: Will be enabled automatically if evpn_l2_multicast is enabled.
                  source_address:
                    type: str
                    description: |
                      IPv4_address
                      If not set, IP address of "Loopback0" will be used.
                  version:
                    type: int
                    convert_types:
                      - str
                    valid_values:
                      - 1
                      - 2
                      - 3
                    default: 2
                  fast_leave:
                    type: bool
                    description: Enable IGMP snooping fast-leave feature.
              bgp:
                type: dict
                keys:
                  structured_config:
                    type: dict
                    description: |
                      Custom structured config added under router_bgp.vlans.[id=<vlan>] for eos_cli_config_gen.
                      This configuration will not be applied to vlan aware bundles.
                    documentation_options:
                      hide_keys: true
                    $ref: "eos_cli_config_gen#/keys/router_bgp/keys/vlans/items"
                  raw_eos_cli:
                    type: str
                    description: |
                      EOS cli commands rendered on router_bgp.vlans.
                      This configuration will not be applied to vlan aware bundles.
        point_to_point_services:
          documentation_options:
            table: network-services-point-to-point-services-settings
          type: list
          primary_key: name
          description: |
            Point to point services (pseudowires).
            Only supported for node types with "network_services.l1: true".
            By default this is only set for node type "pe" with "design.type: mpls"
          items:
            type: dict
            keys:
              name:
                type: str
                description: Pseudowire name.
              type:
                type: str
                default: vpws-pseudowire
                valid_values:
                  - vpws-pseudowire
              subinterfaces:
                type: list
                description: Subinterfaces will create subinterfaces and additional pseudowires/patch panel config for each endpoint.
                primary_key: number
                items:
                  type: dict
                  keys:
                    number:
                      type: int
                      description: Subinterface number.
                      convert_types:
                        - str
              endpoints:
                type: list
                description: Pseudowire terminating endpoints. Must have exactly two items.
                min_length: 2
                max_length: 2
                items:
                  type: dict
                  keys:
                    id:
                      type: int
                      required: true
                      convert_types:
                        - "str"
                      description: Pseudowire ID on this endpoint.
                    nodes:
                      type: list
                      description: Usually one node. With ESI multihoming we support two nodes per pseudowire endpoint.
                      required: true
                      min_length: 1
                      items:
                        type: str
                    interfaces:
                      type: list
                      description: |
                        Interfaces patched to the pseudowire on this endpoints.
                        The list of interfaces is mapped to the list of nodes, so they must have the same length.
                      required: true
                      min_length: 1
                      items:
                        type: str
                    port_channel:
                      type: dict
                      keys:
                        mode:
                          type: str
                          valid_values:
                            - "active"
                            - "on"
                        short_esi:
                          type: str
              lldp_disable:
                type: bool
                description: Disable LLDP RX/TX on port mode pseudowire services.
