{#
 Copyright (c) 2023 Arista Networks, Inc.
 Use of this source code is governed by the Apache License 2.0
 that can be found in the LICENSE file.
#}
{# HEADER -- LOGIC implementation #}
{% set cvp_instance_ip = 'cvp_instance_ip is unset - please set' %}
{% if hostvars[groups[fabric_group][0]]['cvp_instance_ips'] is arista.avd.defined %}
{%     set cvp_instance_ip = hostvars[groups[fabric_group][0]]['cvp_instance_ips'][0] %}
{% elif hostvars[groups[fabric_group][0]]['cvp_instance_ip'] is arista.avd.defined %}
{%     set cvp_instance_ip = hostvars[groups[fabric_group][0]]['cvp_instance_ip'] %}
{% endif %}
{% set node_types = dict() %}
{% set node_type_keys = hostvars[groups[fabric_group][0]]['node_type_keys'] |
        arista.avd.default(['spine', 'l3leaf', 'l2leaf', 'super_spine', 'overlay_controller']) %}
{% for node_type_key in node_type_keys | arista.avd.natural_sort %}
{%     for host in hostvars | arista.avd.natural_sort %}
{%         if host in groups[fabric_group] %}
{%             if hostvars[host][node_type_key] is arista.avd.defined %}
{%                 do node_types.update({node_type_key: hostvars[host][node_type_key]}) %}
{%             endif %}
{%         endif %}
{%     endfor %}
{% endfor %}
{% set mgmt_interface_vrf = hostvars[groups[fabric_group][0]].mgmt_interface_vrf | arista.avd.default("MGMT") %}
{% set nameservers = hostvars[groups[fabric_group][0]].name_servers | arista.avd.default([]) + (
                         hostvars[groups[fabric_group][0]].dns_settings.servers | arista.avd.default([]) |
                             selectattr("vrf", "arista.avd.defined", mgmt_interface_vrf) | map(attribute="ip_address")
                     ) + (
                         hostvars[groups[fabric_group][0]].dns_settings.servers | arista.avd.default([]) |
                             selectattr("use_mgmt_interface_vrf", "arista.avd.defined", true) | map(attribute="ip_address")
                     ) | unique %}
{# DHCP YAML configuration rendering #}
---
ztp:
  default:
    registration: http://{{ cvp_instance_ip }}/ztp/bootstrap
{% if hostvars[groups[fabric_group][0]]['mgmt_gateway'] is arista.avd.defined %}
    gateway: {{ hostvars[groups[fabric_group][0]]['mgmt_gateway'] }}
{% endif %}
{% if nameservers %}
    nameservers:
{%     for nameserver in nameservers | arista.avd.natural_sort %}
      - {{ nameserver }}
{%     endfor %}
{% endif %}
{% if ztp_mac_source == 'system' %}
    use_system_mac: true
{% else %}
    use_system_mac: false
{% endif %}
  general:
    subnets:
{% if ztp_network_summary is arista.avd.defined %}
      - network: {{ ztp_network_summary | ansible.utils.ipaddr('network') }}
        netmask: {{ ztp_network_summary | ansible.utils.ipaddr('netmask') }}
{% endif %}
{% if hostvars[groups[fabric_group][0]]['mgmt_gateway'] is arista.avd.defined %}
        gateway: {{ hostvars[groups[fabric_group][0]]['mgmt_gateway'] }}
{% endif %}
{% if nameservers %}
        nameservers:
{%     for nameserver in nameservers | arista.avd.natural_sort %}
          - {{ nameserver }}
{%     endfor %}
{% endif %}
{% if ztp_pool_start is arista.avd.defined %}
        start: {{ ztp_pool_start }}
{% endif %}
{% if ztp_pool_end is arista.avd.defined %}
        end: {{ ztp_pool_end }}
{% endif %}
        lease_time: {{ ztp_lease_time }}
  clients:
{% for node_type in node_types | arista.avd.natural_sort %}
    # {{ node_type }}
{# For NODE GROUPS entries #}
{%     for node_group in node_types[node_type]['node_groups'] | arista.avd.convert_dicts('group') | arista.avd.natural_sort('group') %}
{%         for node in node_group['nodes'] | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%             if node.mac_address is arista.avd.defined %}
    - name: {{ node.name }}
      mac: '{{ node.mac_address }}'
      ip4: {{ node.mgmt_ip | ansible.utils.ipaddr('address') }}
{%             endif %}
{%         endfor %}
{%     endfor %}
{# For NODES List #}
{%     for node in node_types[node_type]['nodes'] | arista.avd.convert_dicts('name') | arista.avd.natural_sort('name') %}
{%         if node.mac_address is arista.avd.defined %}
    - name: {{ node.name }}
      mac: '{{ node.mac_address }}'
      ip4: {{ node.mgmt_ip | ansible.utils.ipaddr('address') }}
{%         endif %}
{%     endfor %}
{% endfor %}
